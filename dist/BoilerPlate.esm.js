const t=e=>"string"==typeof e,r=e=>"object"==typeof e,n=e=>"object"==typeof e&&"[object Object]"===Object.prototype.toString.call(e)&&e.constructor===Object,o=e=>"function"==typeof e,a=e=>Array.isArray?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e),c=e=>e instanceof RegExp,m=(e,t)=>{let n=null,o=r(t);return (a(t)?t:o?Object.entries(t):[]).some((t=>o&&t[0]===e?(n=t[1],!0):r(t)&&void 0!==t[e]?(n=t[e],!0):void 0)),n},b=function(e,r,n){if(!t(n))throw new Error('"str" must be a string');return e=[].concat(e),r=t(r)?new Array(e.length).fill(r):[].concat(r),e.forEach(((e,t)=>{n=n.replace(new RegExp(y(e),"g"),r[t]??"");})),n},d=function(e,r,n){if(!t(e)||!t(r)||!r)throw new Error('"str" must be a string');if(n&&!t(n)&&!a(n))throw new Error('"ignore" must be an array or a string');let o=new RegExp(`${y(r)}+`,"gi");if(void 0!==n){(n=(n=[].concat(n)).map((e=>y(e)))).map((t=>{let r=new RegExp(`(${y(t)+"*"})`,"gim");e=e.replace(r,t);})),n=new RegExp(`(${n.join("|")})`,"gim");let t="",i=0,a=[],c=(e,n,c,s)=>{let l=s.substring(i,c).replace(o,r);return a=a.concat([l,n]),i=c+e.length,t=s.substring(i),e};return e.match(n,c)?(e.replace(n,c),a.push(t.replace(o,r)),a.join("")):e.replace(o,r)}return e.replace(o,r)},w=function(e){const t="(?!("+Array.prototype.slice.call(arguments,1).join("|")+"))^",r=new RegExp(t,"g");return null!==e.match(r)};function y(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}var j=Object.freeze({__proto__:null,replace:b,unify:d,isNot:w});const _=function(e,t={},r,n=!1){return (e=[].concat(e)).forEach((e=>{const i=e.split("."),a=(t,i)=>{let c;return c=i.shift(),t[c]&&(!0!==n||i.length)||(t[c]=i.length?{}:o(r)?r(e):r),i.length&&a(t[c],i),t};a(t,i);})),t},$=function(e,t,r){for(var n=e.split("."),i=t;void 0!==i&&n.length;)i=i[n.shift()];return o(r)?r(i):void 0===i?r:i},k=function(e){let t=Array.prototype.slice.call(arguments,1);return t=t.map((e=>{if(n(e))return e;if(a(e)){const[t,...r]=e,n=r[0];return Object.fromEntries(Object.entries(t).filter((e=>{let t=e[0];return c(n)?null!==t.match(n):w.apply(j,[t].concat(r))})))}})),Object.assign(e,...t)};async function T(e){let t;try{t=await C(e,{method:"HEAD"}),await t.text();}catch(e){return !1}return 200===t.status}async function z(e){const t=await C(e,{method:"GET"});return await t.text()}async function C(e,r){if(!t(e))throw new Error('"url" must be a string representing the resource location');let n=await fetch(e,r);if(n.status>=400)throw new Error(`Fetching the resource ${e} failed with ${n.status} ${n.statusText}`);return n}const I=e=>e.replace(/^( *)(>+)( >*)*(?!$)/m,(e=>e.replace(/(\s)*(?!$)/g,"")));Object.freeze({__proto__:null,toBlockquote:function(e){let t=(e=>{let t=e.split("\n"),r=[],n=-1,o=null;return t.forEach((e=>{e=I(e),o!==e.indexOf(">")&&n++,o=e.indexOf(">"),r[n]||(r[n]=[]),r[n].push(e);})),r})(e),r=[];return t.forEach((e=>{r.push((e=>{if(0!==e[0].indexOf(">"))return e.join("\n");const t=e=>{"\n"===e[e.length-1]&&e.pop();};let r,n,o=0,i=[];for(e.forEach((e=>{for(n=(e+"").trim().match(/^((>)+) *?(.*?$)/ms),r=n[1].length;r>o;)t(i),o++,i.push("<blockquote>");for(;o>r;)t(i),o--,i.push("</blockquote>");i.push(n[3]),i.push("\n");}));o>0;)t(i),o--,i.push("</blockquote>");return i.join("")})(e));})),r.join("")},toEmailLink:e=>e=e.replace(/[a-zA-Z0-9+._%-]{1,256}@[a-zA-Z0-9][a-zA-Z0-9-]{0,64}(\.[a-zA-Z0-9][a-zA-Z0-9-]{0,25})+/gi,(e=>'<a href="mailto:'+e+'">'+e+"</a>")),toHyperlink:e=>e=e.replace(/(\b(https?):\/\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/gi,(e=>'<a href="'+e+'">'+e+"</a>")),toLineBreak:e=>e=e.replace(/(\r\n|\n|\r)/gm,(e=>"<br />"))});class R{compile(e,t){}}class S{render(e){}}class Z extends S{constructor(e){if(super(),!o(e))throw new Error('"fn" must be of type "function"');this.fn=e;}render(e){const t=this;try{return t.fn.call({},e)}catch(e){throw new Error(`rendering "data" failed with message ${e.message}`)}}}class B extends R{compile(e,t){t.some((e=>{if(-1!==e.indexOf("-"))throw new Error(`Cannot compile template: Contains invalid key-name: ${e}`)}));const r=this,n=r.getKeys(e),o=r.buildArgumentList(n),i=r.getBlacklistedKeys(o,t||[]);if(i.length)throw new Error(`Cannot compile template: Contains invalid keys: ${i.join(", ")}`);const a=r.getFunctionConfig(o,e),c=r.getNativeFunction(a.args,a.fn);return new Z(c)}buildArgumentList(e){let t=e.map((e=>e.split(/\.|\[/)[0]));return [...new Set(t)]}getKeys(e){const t=/\$\{([^}]+)\}/gm,r=[];let n;for(;null!==(n=t.exec(e));)n.index===t.lastIndex&&t.lastIndex++,n.forEach(((e,t)=>{1===t&&r.push(e);}));return r}getBlacklistedKeys(e,t){return t.length?e.filter((e=>-1===t.indexOf(e))):[]}getFunctionConfig(e,t){return {args:`{${e.join(", ")}}`,fn:`return \`${t}\``}}getNativeFunction(e,t){return new Function(e,t)}}class K{render(e){}}class L extends K{constructor(e){super();this.compiler=new B,this.tpl=e;}render(e){const t=this;let r=Object.keys(e),n=r.join(".");return t.compiledTpls=t.compiledTpls||{},t.compiledTpls[n]||(t.compiledTpls[n]=t.compiler.compile(t.tpl,r)),t.compiledTpls[n].render(e)}}var N=Object.freeze({__proto__:null,StringCompiler:B,StringTemplate:L,make:e=>new L(e),Tpl:Z});Object.freeze({__proto__:null,esix:N,CompiledTpl:S,Compiler:R,Template:K});

/**
 * coon.js
 * siesta-lib-helper
 * Copyright (C) 2021 Thorsten Suckow-Homberg https://github.com/coon-js/siesta-lib-helper
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


/**
 * Uses the specified testConfig for teh preLoader-section and applies the related paths found at
 * pathConfigUrl (config-file url()) to it, then passes it to getPaths() and returns the value.
 * content found at pathConfigUrl should be in a format @coon-js/extjs-link produces.
 *
 * @example
 *
 *  json at "pathConfigUrl.json":
 *
 *  {
 *       css: [{
 *               modern: [
 *                   "foo.css"
 *               ],
 *               classic: [
 *                   "bar.css"
 *               ]
 *
 *       }],
 *       js: {
 *               modern: "modern.js",
 *               classic: "classic.js"
 *
 *      }
 *   }
 *
 *
 *  const config = {
 *      loaderPath: {
 *       "Ext.Package": "/node_modules/@coon-js/extjs-package-loader/packages/package-loader/src/src/Package.js",
 *       "coon.core": "../src/",
 *   },
 *   preloads: {
 *       css: [{
 *               modern: [
 *                   "/node_modules/@sencha/ext-modern-runtime/material/material-all_1.css",
 *                   "/node_modules/@sencha/ext-modern-runtime/material/material-all_2.css"
 *               ],
 *               classic: [
 *                   "/node_modules/@sencha/ext-classic-runtime/material/material-all_1.css",
 *                   "/node_modules/@sencha/ext-classic-runtime/material/material-all_2.css",
 *                   "/node_modules/@sencha/ext-classic-runtime/material/material-all_3.css"
 *               ]
 *       }],
 *       js: [
 *           "/node_modules/@l8js/l8/dist/l8.runtime.js", {
 *               modern: "/node_modules/@sencha/ext-modern-runtime/modern.engine.enterprise.js",
 *               classic: "/node_modules/@sencha/ext-modern-runtime/classic.engine.enterprise.js"
 *           }
 *       ]
 *   }};
 *
 *  configureWithExtJsLinkPaths(config, "pathConfigUrl.json", true); // returns {
 *   //   preload : [
 *   //       "foo.css",
 *   //       "/node_modules/@l8js/l8/dist/l8.runtime.js",
 *   //       "/node_modules/@sencha/ext-modern-runtime/modern.engine.enterprise.js"
 *   //       "modern.js"
 *   //   ],
 *   //   loaderPath : {
 *   //       "Ext.Package": "/node_modules/@coon-js/extjs-package-loader/packages/package-loader/src/src/Package.js",
 *   //       "coon.core": "../src/"
 *   //   }
 *  // };
 *
 *
 * @param {Object} testConfig
 * @param {String} pathConfigUrl
 * @param {Boolean} isModern
 * @returns {Promise<{loaderPath: {}, preload: *[]}>}
 */
const configureWithExtJsLinkPaths = async function (testConfig, pathConfigUrl, isModern) {

    if (await T(pathConfigUrl)) {

        const
            extjsLinkConfig = JSON.parse(await z(pathConfigUrl)),
            mergedCss = {}, mergedJs = {},
            collect = (section, toolkit) => {
                let res = [];
                section.forEach(entry => {
                    if (t(entry)) {
                        res.push(entry);
                    } else if (n(entry)) {
                        res = res.concat(entry[toolkit] ?? []);
                    }
                });
                return res;
            };

        ["classic", "modern"].forEach(toolkit => {

            let ff = m.bind(null, toolkit),
                css = collect([].concat($("preload.css", testConfig)), toolkit),
                js = collect([].concat($("preload.js", testConfig)), toolkit),
                extCss = $("css", extjsLinkConfig, ff),
                extJs =  $("js", extjsLinkConfig, ff);


            _(toolkit, mergedCss, [].concat(css, [].concat(extCss)));
            _(toolkit, mergedJs, [].concat(js, [].concat(extJs)));
        });


        _("preload.css", testConfig, mergedCss, true);
        _("preload.js", testConfig, mergedJs, true);
    }

    return getPaths(testConfig, isModern);

};


/**
 * Consumes a configuration object and looks up js/css-related path information,
 * then returns it pre-configured to be used with Siestas Siesta.Harness.Browser.ExtJS()#config.
 *
 * @example
 *
 *  const config = {
 *      loaderPath: {
 *       "Ext.Package": "/node_modules/@coon-js/extjs-package-loader/packages/package-loader/src/src/Package.js",
 *       "coon.core": "../src/",
 *   },
 *   preloads: {
 *       css: [{
 *               modern: [
 *                   "/node_modules/@sencha/ext-modern-runtime/material/material-all_1.css",
 *                   "/node_modules/@sencha/ext-modern-runtime/material/material-all_2.css"
 *               ],
 *               classic: [
 *                   "/node_modules/@sencha/ext-classic-runtime/material/material-all_1.css",
 *                   "/node_modules/@sencha/ext-classic-runtime/material/material-all_2.css",
 *                   "/node_modules/@sencha/ext-classic-runtime/material/material-all_3.css"
 *               ]
 *       }],
 *       js: [
 *           "/node_modules/@l8js/l8/dist/l8.runtime.js", {
 *               modern: "/node_modules/@sencha/ext-modern-runtime/modern.engine.enterprise.js",
 *               classic: "/node_modules/@sencha/ext-modern-runtime/classic.engine.enterprise.js"
 *          }
 *       ]
 *   }};
 *
 *  getPaths(config, true); // returns {
 *   //   preload : [
 *   //       "/node_modules/@sencha/ext-modern-runtime/material/material-all_1.css",
 *   //       "/node_modules/@sencha/ext-modern-runtime/material/material-all_2.css",
 *   //       "/node_modules/@l8js/l8/dist/l8.runtime.js",
 *   //       "/node_modules/@sencha/ext-modern-runtime/modern.engine.enterprise.js"
 *   //   ],
 *   //   loaderPath : {
 *   //       "Ext.Package": "/node_modules/@coon-js/extjs-package-loader/packages/package-loader/src/src/Package.js",
 *   //       "coon.core": "../src/"
 *   //   }
 *  // };
 *
 *
 *
 */
const getPaths = (config, isModern) => {

    const
        result = {preload: [], loaderPath: {}},
        isObject = r,
        isArray = a,
        isString = t,
        toolkit = isModern ? "modern" : isModern === false ? "classic" : null,
        parseSection = (section) => {

            section = [].concat(section);

            section.forEach((entry) => {

                if (isString(entry)) {
                    result.preload.push(entry);
                } else if (isObject(entry) && toolkit !== null) {
                    if (isArray(entry[toolkit])) {
                        result.preload = result.preload.concat(entry[toolkit]);
                    } else if (isString(entry[toolkit])) {
                        result.preload.push(entry[toolkit]);
                    }
                }

            });

        };

    k(
        result.loaderPath,
        [config.loaderPath || {}, "classic", "modern"],
        config.loaderPath && config.loaderPath[toolkit] ? config.loaderPath[toolkit] : {}
    );

    const {js, css} = config.preload || {};

    parseSection(css);
    parseSection(js);

    return result;

};

/**
 * coon.js
 * siesta-lib-helper
 * Copyright (C) 2021 Thorsten Suckow-Homberg https://github.com/coon-js/siesta-lib-helper
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

if (!coonjs.siestaTestConfigObj || !coonjs.siestaGroupsConfigObj || ! coonjs.extjsLinkConfigUrl) {
    throw new Error("Config missing");
}

const
    testConfig = coonjs.siestaTestConfigObj,
    groups = coonjs.siestaGroupsConfigObj,
    extjsLinkConfigUrl = coonjs.extjsLinkConfigUrl;

let toolkitGroups,
    remainingGroups,
    configuredToolkitGroups,
    hasToolkitRelatedConfig = false,
    urlParams = new URLSearchParams(document.location.search.substring(1)),
    timeout =  urlParams.get("timeout") ? parseInt(urlParams.get("timeout")) : testConfig.timeout,
    forcedToolkit = urlParams.get("toolkit"),
    toolkit = urlParams.get("toolkit") ?? "classic";

const
    browser = new Siesta.Harness.Browser.ExtJS();

configureWithExtJsLinkPaths(testConfig, extjsLinkConfigUrl, toolkit === "modern").then((paths) => {


    configuredToolkitGroups = groups.filter(entry => ["classic", "modern"].indexOf(entry.group) !== -1);
    hasToolkitRelatedConfig = configuredToolkitGroups.length > 0;
    toolkitGroups = groups.filter(entry => ["universal", toolkit].indexOf(entry.group) !== -1);
    // we need to check if the loader specifies different classes for modern/classic here, as the tests
    // might be declared as "universal", but the test cases load different files for the toolkits
    toolkit = toolkitGroups.length ? toolkitGroups[0].group : "universal";
    if (toolkit === "universal" && (testConfig.loaderPath.classic || testConfig.loaderPath.modern)) {
        toolkit =  urlParams.get("toolkit") || (testConfig.loaderPath.classic ? "classic" : "modern");
        forcedToolkit = toolkit;
    }

    remainingGroups = groups.filter(entry => ["universal", "classic", "modern"].indexOf(entry.group) === -1);

    browser.configure(Object.assign({
        title: `${testConfig.name} [${toolkit}]`,
        isEcmaModule: true,
        disableCaching: true,
        config : {
            TIMEOUT : timeout
        }
    }, paths));

    browser.start((toolkitGroups.length ? toolkitGroups : groups).concat(remainingGroups));

    // classic | modern | timeout options
    document.getElementById("cn_timeout").value = timeout;
    if (["classic", "modern"].indexOf(toolkit) !== -1) {
        document.getElementById(`cn_${toolkit}`).checked = true;
    } else if (!hasToolkitRelatedConfig) {
        ["classic", "modern"].forEach(toolkit => document.getElementById(`cn_${toolkit}`).disabled = true);
    } else if (hasToolkitRelatedConfig && ["classic", "modern"].indexOf(forcedToolkit) !== -1) {
        document.getElementById(`cn_${forcedToolkit}`).checked = true;
    }
    document.getElementById("cn_configBtn").onclick = () => {
        let timeout = document.getElementById("cn_timeout").value,
            toolkit = document.getElementById("cn_classic").checked ?
                "classic" :
                document.getElementById("cn_modern").checked ? "modern" : "";

        window.location.href = `./index.extjs-browser.html?toolkit=${toolkit}&timeout=${timeout}`;
    };

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
